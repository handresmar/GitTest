
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         000008f4  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       0000004c  000008f4  000008f4  00000948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00000940  00000940  00000994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000008c  0000095c  0000095c  000009b0  2**2
                  ALLOC
  4 .debug_abbrev 00000375  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a0d  00000000  00000000  00000d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000848  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000200  00000000  00000000  00001f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000321  00000000  00000000  0000217c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000237  00000000  00000000  0000249d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000083  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002757  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000028c  00000000  00000000  00002797  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002a23  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000048  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 db 	calli 438 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 09 60 	ori gp,gp,0x960
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 09 5c 	ori r1,r1,0x95c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 09 e8 	ori r3,r3,0x9e8

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 4b 	calli 268 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <writeint>:
 */

#include "soc-hw.h"

inline void writeint(uint32_t val)
{
 208:	37 9c ff f0 	addi sp,sp,-16
 20c:	5b 8b 00 10 	sw (sp+16),r11
 210:	5b 8c 00 0c 	sw (sp+12),r12
 214:	5b 8d 00 08 	sw (sp+8),r13
 218:	5b 9d 00 04 	sw (sp+4),ra
 21c:	34 0b 00 08 	mvi r11,8
 220:	b8 20 60 00 	mv r12,r1
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 224:	34 0d 00 09 	mvi r13,9
 228:	e0 00 00 02 	bi 230 <writeint+0x28>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
 22c:	3d 8c 00 04 	sli r12,r12,4
inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
 230:	01 82 00 1c 	srui r2,r12,28
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
 234:	34 41 00 37 	addi r1,r2,55
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
 238:	51 a2 00 0a 	bgeu r13,r2,260 <writeint+0x58>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 23c:	35 6b ff ff 	addi r11,r11,-1
 240:	f8 00 01 0c 	calli 670 <uart_putchar>

inline void writeint(uint32_t val)
{
	uint32_t i, digit;

	for (i=0; i<8; i++) {
 244:	5d 60 ff fa 	bne r11,r0,22c <writeint+0x24>
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
		val <<= 4;
	}
}
 248:	2b 9d 00 04 	lw ra,(sp+4)
 24c:	2b 8b 00 10 	lw r11,(sp+16)
 250:	2b 8c 00 0c 	lw r12,(sp+12)
 254:	2b 8d 00 08 	lw r13,(sp+8)
 258:	37 9c 00 10 	addi sp,sp,16
 25c:	c3 a0 00 00 	ret
	for (i=0; i<8; i++) {
		digit = (val & 0xf0000000) >> 28;
		if (digit >= 0xA) 
			uart_putchar('A'+digit-10);
		else
			uart_putchar('0'+digit);
 260:	34 41 00 30 	addi r1,r2,48
 264:	e3 ff ff f6 	bi 23c <writeint+0x34>

00000268 <main>:

extern uint32_t tic_msec;


int main()
{
 268:	37 9c ff d4 	addi sp,sp,-44
 26c:	5b 8b 00 2c 	sw (sp+44),r11
 270:	5b 8c 00 28 	sw (sp+40),r12
 274:	5b 8d 00 24 	sw (sp+36),r13
 278:	5b 8e 00 20 	sw (sp+32),r14
 27c:	5b 8f 00 1c 	sw (sp+28),r15
 280:	5b 90 00 18 	sw (sp+24),r16
 284:	5b 91 00 14 	sw (sp+20),r17
 288:	5b 92 00 10 	sw (sp+16),r18
 28c:	5b 93 00 0c 	sw (sp+12),r19
 290:	5b 94 00 08 	sw (sp+8),r20
 294:	5b 9d 00 04 	sw (sp+4),ra
	//variables de control	
	int speed = 0x0;
	char t='\0';

	msleep(50);
 298:	34 01 00 32 	mvi r1,50
 29c:	f8 00 00 97 	calli 4f8 <msleep>


int main()
{
	//variables de control	
	int speed = 0x0;
 2a0:	34 0e 00 00 	mvi r14,0
	char t='\0';

	msleep(50);

	// iniciar wifi
	init_wifi();
 2a4:	f8 00 01 24 	calli 734 <init_wifi>


	for(;;){
		t='\0';
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 2a8:	34 0c 00 0b 	mvi r12,11
	// iniciar wifi
	init_wifi();

	// iniciar motores

	setMotors();
 2ac:	f8 00 01 72 	calli 874 <setMotors>
			uart_putchar1(0x0A);
			t = wifi_getchar();
			//stab();(Tentativa de función)
		}

		if(t=='u'){
 2b0:	34 0d 00 75 	mvi r13,117
			}

		}
		else{
			
			if(t=='d'){
 2b4:	34 0f 00 64 	mvi r15,100
					up_down_q(speed);
				}
			}

			else{
				if(t=='r'){
 2b8:	34 10 00 72 	mvi r16,114
					uart_putchar1(speed);
					uart_putchar1(0x0D);
					uart_putchar1(0x0A);
				}
				else{
					if(t=='l'){
 2bc:	34 12 00 6c 	mvi r18,108
						uart_putchar1(speed);
						uart_putchar1(0x0D);
						uart_putchar1(0x0A);
					}
					else{
						if(t=='f'){
 2c0:	34 13 00 66 	mvi r19,102
							uart_putchar1(speed);
							uart_putchar1(0x0D);
							uart_putchar1(0x0A);
						}
						else {
							if(t=='b'){
 2c4:	34 14 00 62 	mvi r20,98

		}
		else{
			
			if(t=='d'){
				if((speed > 0x0) && (speed <= 0x69)){
 2c8:	34 11 00 68 	mvi r17,104

	setMotors();


	for(;;){
		t='\0';
 2cc:	34 02 00 00 	mvi r2,0
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
			uart_putchar1(speed);
 2d0:	21 cb 00 ff 	andi r11,r14,0xff


	for(;;){
		t='\0';
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 2d4:	64 46 00 0d 	cmpei r6,r2,13
 2d8:	64 43 00 0a 	cmpei r3,r2,10
 2dc:	64 45 00 00 	cmpei r5,r2,0
 2e0:	64 44 00 20 	cmpei r4,r2,32
 2e4:	b8 c3 18 00 	or r3,r6,r3
			uart_putchar1(speed);
 2e8:	b9 60 08 00 	mv r1,r11


	for(;;){
		t='\0';
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 2ec:	b8 a4 20 00 	or r4,r5,r4
 2f0:	5c 60 00 19 	bne r3,r0,354 <main+0xec>
 2f4:	5c 83 00 18 	bne r4,r3,354 <main+0xec>
 2f8:	44 4c 00 17 	be r2,r12,354 <main+0xec>
			uart_putchar1(0x0A);
			t = wifi_getchar();
			//stab();(Tentativa de función)
		}

		if(t=='u'){
 2fc:	44 4d 00 1c 	be r2,r13,36c <main+0x104>
			}

		}
		else{
			
			if(t=='d'){
 300:	44 4f 00 20 	be r2,r15,380 <main+0x118>
					up_down_q(speed);
				}
			}

			else{
				if(t=='r'){
 304:	44 50 00 04 	be r2,r16,314 <main+0xac>
					uart_putchar1(speed);
					uart_putchar1(0x0D);
					uart_putchar1(0x0A);
				}
				else{
					if(t=='l'){
 308:	44 52 00 03 	be r2,r18,314 <main+0xac>
						uart_putchar1(speed);
						uart_putchar1(0x0D);
						uart_putchar1(0x0A);
					}
					else{
						if(t=='f'){
 30c:	44 53 00 02 	be r2,r19,314 <main+0xac>
							uart_putchar1(speed);
							uart_putchar1(0x0D);
							uart_putchar1(0x0A);
						}
						else {
							if(t=='b'){
 310:	44 54 00 21 	be r2,r20,394 <main+0x12c>

								speed = 0x0;
								up_down_q(speed);
							}
							else{
								uart_putchar1(speed);
 314:	21 c1 00 ff 	andi r1,r14,0xff
 318:	f8 00 01 28 	calli 7b8 <uart_putchar1>
								uart_putchar1(0x0D);
 31c:	34 01 00 0d 	mvi r1,13
 320:	f8 00 01 26 	calli 7b8 <uart_putchar1>
								uart_putchar1(0x0A);
 324:	34 01 00 0a 	mvi r1,10
 328:	f8 00 01 24 	calli 7b8 <uart_putchar1>

	setMotors();


	for(;;){
		t='\0';
 32c:	34 02 00 00 	mvi r2,0
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 330:	64 46 00 0d 	cmpei r6,r2,13
 334:	64 43 00 0a 	cmpei r3,r2,10
 338:	64 45 00 00 	cmpei r5,r2,0
 33c:	64 44 00 20 	cmpei r4,r2,32
			uart_putchar1(speed);
 340:	21 cb 00 ff 	andi r11,r14,0xff


	for(;;){
		t='\0';
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 344:	b8 c3 18 00 	or r3,r6,r3
			uart_putchar1(speed);
 348:	b9 60 08 00 	mv r1,r11


	for(;;){
		t='\0';
		
		while(t =='\n' || t =='\r'|| t == ' '  || t == '\0' || t =='\v'|| t == 10 || t == 13){
 34c:	b8 a4 20 00 	or r4,r5,r4
 350:	44 60 ff e9 	be r3,r0,2f4 <main+0x8c>
			uart_putchar1(speed);
 354:	f8 00 01 19 	calli 7b8 <uart_putchar1>
			//uart_putchar1(0x0D);
			uart_putchar1(0x0A);
 358:	34 01 00 0a 	mvi r1,10
 35c:	f8 00 01 17 	calli 7b8 <uart_putchar1>
			t = wifi_getchar();
 360:	f8 00 00 92 	calli 5a8 <wifi_getchar>
 364:	b8 20 10 00 	mv r2,r1
 368:	e3 ff ff db 	bi 2d4 <main+0x6c>
			//stab();(Tentativa de función)
		}

		if(t=='u'){
			if((speed >= 0x0) && (speed < 0x69)){
 36c:	55 d1 00 0e 	bgu r14,r17,3a4 <main+0x13c>
				speed = speed + 0x1;
 370:	35 ce 00 01 	addi r14,r14,1
				up_down_q(speed);
 374:	b9 c0 08 00 	mv r1,r14
 378:	f8 00 01 52 	calli 8c0 <up_down_q>
 37c:	e3 ff ff d4 	bi 2cc <main+0x64>

		}
		else{
			
			if(t=='d'){
				if((speed > 0x0) && (speed <= 0x69)){
 380:	35 ce ff ff 	addi r14,r14,-1
 384:	55 d1 00 04 	bgu r14,r17,394 <main+0x12c>
					speed = speed - 0x1;
					up_down_q(speed);
 388:	b9 c0 08 00 	mv r1,r14
 38c:	f8 00 01 4d 	calli 8c0 <up_down_q>
 390:	e3 ff ff cf 	bi 2cc <main+0x64>
						}
						else {
							if(t=='b'){

								speed = 0x0;
								up_down_q(speed);
 394:	34 01 00 00 	mvi r1,0
 398:	f8 00 01 4a 	calli 8c0 <up_down_q>
							uart_putchar1(0x0A);
						}
						else {
							if(t=='b'){

								speed = 0x0;
 39c:	34 0e 00 00 	mvi r14,0
 3a0:	e3 ff ff cb 	bi 2cc <main+0x64>
				speed = speed + 0x1;
				up_down_q(speed);
			}
			else{
				speed = 0x69;
				up_down_q(speed);
 3a4:	34 01 00 69 	mvi r1,105
 3a8:	f8 00 01 46 	calli 8c0 <up_down_q>
			if((speed >= 0x0) && (speed < 0x69)){
				speed = speed + 0x1;
				up_down_q(speed);
			}
			else{
				speed = 0x69;
 3ac:	34 0e 00 69 	mvi r14,105
 3b0:	e3 ff ff c7 	bi 2cc <main+0x64>

000003b4 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 3b4:	c3 a0 00 00 	ret

000003b8 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 3b8:	78 01 00 00 	mvhi r1,0x0
 3bc:	38 21 09 e4 	ori r1,r1,0x9e4
 3c0:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3c4:	78 02 00 00 	mvhi r2,0x0
 3c8:	38 42 09 4c 	ori r2,r2,0x94c
 3cc:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 3d0:	34 63 00 01 	addi r3,r3,1
 3d4:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 3d8:	34 01 00 0e 	mvi r1,14
 3dc:	58 41 00 00 	sw (r2+0),r1
}
 3e0:	c3 a0 00 00 	ret

000003e4 <prueba>:

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 3e4:	78 02 00 00 	mvhi r2,0x0
 3e8:	38 42 09 48 	ori r2,r2,0x948
	uart1->rxtx=30;
 3ec:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 3f0:	28 45 00 00 	lw r5,(r2+0)
	uart1->rxtx=30;
 3f4:	38 21 09 54 	ori r1,r1,0x954
	timer0->tcr0 = 0xAA;
 3f8:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
	uart1->rxtx=30;
 3fc:	28 24 00 00 	lw r4,(r1+0)
	timer0->tcr0 = 0xAA;
 400:	38 42 09 4c 	ori r2,r2,0x94c
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 404:	78 01 00 00 	mvhi r1,0x0

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 408:	34 03 00 1e 	mvi r3,30
	uart1->rxtx=30;
	timer0->tcr0 = 0xAA;
 40c:	28 42 00 00 	lw r2,(r2+0)
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 410:	38 21 09 58 	ori r1,r1,0x958

isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
 414:	58 a3 00 04 	sw (r5+4),r3
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 418:	28 21 00 00 	lw r1,(r1+0)
isr_ptr_t isr_table[32];

void prueba()
{
	uart0->rxtx=30;
	uart1->rxtx=30;
 41c:	58 83 00 04 	sw (r4+4),r3
	timer0->tcr0 = 0xAA;
 420:	34 03 00 aa 	mvi r3,170
 424:	58 43 00 00 	sw (r2+0),r3
	//spi0->rxtx=1;
	//spi0->nop1=2;
	//spi0->cs=3;
	//spi0->nop2=5;
	//spi0->divisor=4;
	i2c0->rxtx=5;
 428:	34 02 00 05 	mvi r2,5
 42c:	58 22 00 00 	sw (r1+0),r2
	i2c0->divisor=5;
 430:	58 22 00 04 	sw (r1+4),r2

}
 434:	c3 a0 00 00 	ret

00000438 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 438:	37 9c ff f0 	addi sp,sp,-16
 43c:	5b 8b 00 10 	sw (sp+16),r11
 440:	5b 8c 00 0c 	sw (sp+12),r12
 444:	5b 8d 00 08 	sw (sp+8),r13
 448:	5b 9d 00 04 	sw (sp+4),ra
 44c:	78 0b 00 00 	mvhi r11,0x0
 450:	39 6b 09 64 	ori r11,r11,0x964
 454:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 458:	35 6d 00 80 	addi r13,r11,128
 45c:	e0 00 00 04 	bi 46c <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 460:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 464:	45 6d 00 08 	be r11,r13,484 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 468:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 46c:	21 81 00 01 	andi r1,r12,0x1
 470:	44 20 ff fc 	be r1,r0,460 <irq_handler+0x28>
 474:	29 61 00 00 	lw r1,(r11+0)
 478:	35 6b 00 04 	addi r11,r11,4
 47c:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 480:	5d 6d ff fa 	bne r11,r13,468 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 484:	2b 9d 00 04 	lw ra,(sp+4)
 488:	2b 8b 00 10 	lw r11,(sp+16)
 48c:	2b 8c 00 0c 	lw r12,(sp+12)
 490:	2b 8d 00 08 	lw r13,(sp+8)
 494:	37 9c 00 10 	addi sp,sp,16
 498:	c3 a0 00 00 	ret

0000049c <isr_init>:

void isr_init()
{
 49c:	78 01 00 00 	mvhi r1,0x0
 4a0:	78 02 00 00 	mvhi r2,0x0
 4a4:	38 21 09 64 	ori r1,r1,0x964
 4a8:	38 42 03 b4 	ori r2,r2,0x3b4
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 4ac:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4b0:	58 22 00 00 	sw (r1+0),r2
 4b4:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4b8:	5c 23 ff fe 	bne r1,r3,4b0 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4bc:	c3 a0 00 00 	ret

000004c0 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4c0:	78 03 00 00 	mvhi r3,0x0
 4c4:	3c 21 00 02 	sli r1,r1,2
 4c8:	38 63 09 64 	ori r3,r3,0x964
 4cc:	b4 61 18 00 	add r3,r3,r1
 4d0:	58 62 00 00 	sw (r3+0),r2
}
 4d4:	c3 a0 00 00 	ret

000004d8 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4d8:	78 03 00 00 	mvhi r3,0x0
 4dc:	3c 21 00 02 	sli r1,r1,2
 4e0:	38 63 09 64 	ori r3,r3,0x964
 4e4:	78 02 00 00 	mvhi r2,0x0
 4e8:	b4 61 18 00 	add r3,r3,r1
 4ec:	38 42 03 b4 	ori r2,r2,0x3b4
 4f0:	58 62 00 00 	sw (r3+0),r2
}
 4f4:	c3 a0 00 00 	ret

000004f8 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 4f8:	78 04 00 00 	mvhi r4,0x0
 4fc:	38 84 08 f4 	ori r4,r4,0x8f4
 500:	28 83 00 00 	lw r3,(r4+0)
 504:	78 02 00 00 	mvhi r2,0x0
 508:	38 42 09 4c 	ori r2,r2,0x94c
 50c:	28 42 00 00 	lw r2,(r2+0)
 510:	88 23 08 00 	mul r1,r1,r3
 514:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 518:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 51c:	34 01 00 08 	mvi r1,8
 520:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
 524:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 528:	20 21 00 01 	andi r1,r1,0x1
 52c:	44 20 ff fe 	be r1,r0,524 <msleep+0x2c>
}
 530:	c3 a0 00 00 	ret

00000534 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 534:	78 02 00 00 	mvhi r2,0x0
 538:	38 42 09 4c 	ori r2,r2,0x94c
 53c:	28 42 00 00 	lw r2,(r2+0)
 540:	08 21 00 64 	muli r1,r1,100
 544:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 548:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 54c:	34 01 00 08 	mvi r1,8
 550:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
		tcr = timer0->tcr1;
 554:	28 41 00 0c 	lw r1,(r2+12)
	} while ( ! (tcr & TIMER_TRIG) );
 558:	20 21 00 01 	andi r1,r1,0x1
 55c:	44 20 ff fe 	be r1,r0,554 <nsleep+0x20>
}
 560:	c3 a0 00 00 	ret

00000564 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 564:	78 01 00 00 	mvhi r1,0x0
 568:	38 21 09 4c 	ori r1,r1,0x94c
 56c:	28 23 00 00 	lw r3,(r1+0)
 570:	34 02 27 10 	mvi r2,10000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 574:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 578:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 57c:	38 21 09 e4 	ori r1,r1,0x9e4

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 580:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 584:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 588:	78 02 00 00 	mvhi r2,0x0
 58c:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 590:	34 04 00 0e 	mvi r4,14
 594:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 598:	38 21 09 64 	ori r1,r1,0x964
 59c:	38 42 03 b8 	ori r2,r2,0x3b8
 5a0:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 5a4:	c3 a0 00 00 	ret

000005a8 <wifi_getchar>:
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 09 48 	ori r1,r1,0x948
 5b0:	28 22 00 00 	lw r2,(r1+0)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5b4:	34 03 00 00 	mvi r3,0
		c = uart_getchar();
		if (c ==':'){
 5b8:	34 04 00 3a 	mvi r4,58
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5bc:	34 05 00 14 	mvi r5,20
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5c0:	28 41 00 00 	lw r1,(r2+0)
 5c4:	20 21 00 01 	andi r1,r1,0x1
 5c8:	44 20 ff fe 	be r1,r0,5c0 <wifi_getchar+0x18>
	return uart0->rxtx;
 5cc:	28 41 00 04 	lw r1,(r2+4)
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5d0:	34 63 00 01 	addi r3,r3,1
		c = uart_getchar();
		if (c ==':'){
 5d4:	20 21 00 ff 	andi r1,r1,0xff
 5d8:	44 24 00 04 	be r1,r4,5e8 <wifi_getchar+0x40>
}

char wifi_getchar(){
	char c='\n';
	int i=0;
	for(i=0;i<20;i++){
 5dc:	5c 65 ff f9 	bne r3,r5,5c0 <wifi_getchar+0x18>
			c = uart_getchar();
			return c;
			break;
		}
	}
	return '\n';
 5e0:	34 01 00 0a 	mvi r1,10

}
 5e4:	c3 a0 00 00 	ret
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 5e8:	28 41 00 00 	lw r1,(r2+0)
 5ec:	20 21 00 01 	andi r1,r1,0x1
 5f0:	44 20 ff fe 	be r1,r0,5e8 <wifi_getchar+0x40>
	return uart0->rxtx;
 5f4:	28 41 00 04 	lw r1,(r2+4)
 5f8:	20 21 00 ff 	andi r1,r1,0xff
	int i=0;
	for(i=0;i<20;i++){
		c = uart_getchar();
		if (c ==':'){
			c = uart_getchar();
			return c;
 5fc:	c3 a0 00 00 	ret

00000600 <ok>:
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 600:	78 01 00 00 	mvhi r1,0x0
 604:	38 21 09 48 	ori r1,r1,0x948
 608:	28 22 00 00 	lw r2,(r1+0)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 60c:	34 03 00 00 	mvi r3,0
		a=uart_getchar();
		if(a=='K'){
 610:	34 04 00 4b 	mvi r4,75
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 614:	34 05 00 1e 	mvi r5,30
	//uart0->div = (FCPU/(57600*16));
}

char uart_getchar()
{   
	while (! (uart0->ucr & UART_DR)) ;
 618:	28 41 00 00 	lw r1,(r2+0)
 61c:	20 21 00 01 	andi r1,r1,0x1
 620:	44 20 ff fe 	be r1,r0,618 <ok+0x18>
	return uart0->rxtx;
 624:	28 41 00 04 	lw r1,(r2+4)
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 628:	34 63 00 01 	addi r3,r3,1
		a=uart_getchar();
		if(a=='K'){
 62c:	20 21 00 ff 	andi r1,r1,0xff
 630:	44 24 00 04 	be r1,r4,640 <ok+0x40>
}

int ok(){
	int i=0;
	char a;
	for(i=0;i<30;i++){
 634:	5c 65 ff f9 	bne r3,r5,618 <ok+0x18>
		a=uart_getchar();
		if(a=='K'){
			return 1;
		}
	}
	return 0;
 638:	34 01 00 00 	mvi r1,0
 63c:	c3 a0 00 00 	ret
	int i=0;
	char a;
	for(i=0;i<30;i++){
		a=uart_getchar();
		if(a=='K'){
			return 1;
 640:	34 01 00 01 	mvi r1,1
		}
	}
	return 0;

}
 644:	c3 a0 00 00 	ret

00000648 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 648:	c3 a0 00 00 	ret

0000064c <uart_getchar>:

char uart_getchar()
{   
 64c:	78 01 00 00 	mvhi r1,0x0
 650:	38 21 09 48 	ori r1,r1,0x948
 654:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 658:	28 41 00 00 	lw r1,(r2+0)
 65c:	20 21 00 01 	andi r1,r1,0x1
 660:	44 20 ff fe 	be r1,r0,658 <uart_getchar+0xc>
	return uart0->rxtx;
 664:	28 41 00 04 	lw r1,(r2+4)
}
 668:	20 21 00 ff 	andi r1,r1,0xff
 66c:	c3 a0 00 00 	ret

00000670 <uart_putchar>:

void uart_putchar(char c)
{
 670:	78 02 00 00 	mvhi r2,0x0
 674:	38 42 09 48 	ori r2,r2,0x948
 678:	28 43 00 00 	lw r3,(r2+0)
 67c:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 680:	28 62 00 00 	lw r2,(r3+0)
 684:	20 42 00 10 	andi r2,r2,0x10
 688:	5c 40 ff fe 	bne r2,r0,680 <uart_putchar+0x10>
	uart0->rxtx = c;
 68c:	58 61 00 04 	sw (r3+4),r1
}
 690:	c3 a0 00 00 	ret

00000694 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 694:	40 24 00 00 	lbu r4,(r1+0)
 698:	44 80 00 0b 	be r4,r0,6c4 <uart_putstr+0x30>
 69c:	78 02 00 00 	mvhi r2,0x0
 6a0:	38 42 09 48 	ori r2,r2,0x948
 6a4:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 6a8:	28 62 00 00 	lw r2,(r3+0)
 6ac:	20 42 00 10 	andi r2,r2,0x10
 6b0:	5c 40 ff fe 	bne r2,r0,6a8 <uart_putstr+0x14>
	uart0->rxtx = c;
 6b4:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 6b8:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6bc:	40 24 00 00 	lbu r4,(r1+0)
 6c0:	5c 82 ff fa 	bne r4,r2,6a8 <uart_putstr+0x14>
 6c4:	c3 a0 00 00 	ret

000006c8 <wifi_putchar>:
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}

void wifi_putchar(char a){
 6c8:	37 9c ff ec 	addi sp,sp,-20
 6cc:	5b 8b 00 14 	sw (sp+20),r11
 6d0:	5b 8c 00 10 	sw (sp+16),r12
 6d4:	5b 8d 00 0c 	sw (sp+12),r13
 6d8:	5b 8e 00 08 	sw (sp+8),r14
 6dc:	5b 9d 00 04 	sw (sp+4),ra
 6e0:	78 0d 00 00 	mvhi r13,0x0
 6e4:	78 0c 00 00 	mvhi r12,0x0
 6e8:	20 2e 00 ff 	andi r14,r1,0xff
 6ec:	39 ad 08 fc 	ori r13,r13,0x8fc
 6f0:	39 8c 09 48 	ori r12,r12,0x948
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
 6f4:	b9 a0 08 00 	mv r1,r13
 6f8:	fb ff ff e7 	calli 694 <uart_putstr>
 6fc:	29 82 00 00 	lw r2,(r12+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 700:	28 4b 00 00 	lw r11,(r2+0)
 704:	21 6b 00 10 	andi r11,r11,0x10
 708:	5d 60 ff fe 	bne r11,r0,700 <wifi_putchar+0x38>
	uart0->rxtx = c;
 70c:	58 4e 00 04 	sw (r2+4),r14
void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
 710:	fb ff ff bc 	calli 600 <ok>
	}
}

void wifi_putchar(char a){
	int c = 0; 	  
	while(c == 0){
 714:	44 2b ff f8 	be r1,r11,6f4 <wifi_putchar+0x2c>
		uart_putstr("AT+CIPSEND=0,1\r\n");
		uart_putchar(a);
		c = ok();
	}
}
 718:	2b 9d 00 04 	lw ra,(sp+4)
 71c:	2b 8b 00 14 	lw r11,(sp+20)
 720:	2b 8c 00 10 	lw r12,(sp+16)
 724:	2b 8d 00 0c 	lw r13,(sp+12)
 728:	2b 8e 00 08 	lw r14,(sp+8)
 72c:	37 9c 00 14 	addi sp,sp,20
 730:	c3 a0 00 00 	ret

00000734 <init_wifi>:

/***************************************************************************
 * WIFI ESP8266 Functions
 */

void init_wifi(){ //configurar el modulo como estación con puerto 80
 734:	37 9c ff f8 	addi sp,sp,-8
 738:	5b 8b 00 08 	sw (sp+8),r11
 73c:	5b 9d 00 04 	sw (sp+4),ra
	uart_putstr("AT+RST\r\n");
 740:	78 01 00 00 	mvhi r1,0x0
 744:	38 21 09 10 	ori r1,r1,0x910
 748:	fb ff ff d3 	calli 694 <uart_putstr>
	msleep(200);
 74c:	34 01 00 c8 	mvi r1,200
 750:	78 0b 00 00 	mvhi r11,0x0
 754:	fb ff ff 69 	calli 4f8 <msleep>
 758:	39 6b 09 1c 	ori r11,r11,0x91c
	int c = 0;
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
 75c:	b9 60 08 00 	mv r1,r11
 760:	fb ff ff cd 	calli 694 <uart_putstr>
		c = ok();
 764:	fb ff ff a7 	calli 600 <ok>

void init_wifi(){ //configurar el modulo como estación con puerto 80
	uart_putstr("AT+RST\r\n");
	msleep(200);
	int c = 0;
	while(c==0){
 768:	44 20 ff fd 	be r1,r0,75c <init_wifi+0x28>
 76c:	78 0b 00 00 	mvhi r11,0x0
 770:	39 6b 09 2c 	ori r11,r11,0x92c
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
		uart_putstr("AT+CIPSERVER=1,80\r\n");
 774:	b9 60 08 00 	mv r1,r11
 778:	fb ff ff c7 	calli 694 <uart_putstr>
		c = ok();
 77c:	fb ff ff a1 	calli 600 <ok>
	while(c==0){
		uart_putstr("AT+CIPMUX=1\r\n");
		c = ok();
	}
	c = 0;
	while (c==0){
 780:	44 20 ff fd 	be r1,r0,774 <init_wifi+0x40>
		uart_putstr("AT+CIPSERVER=1,80\r\n");
		c = ok();
	}
}
 784:	2b 9d 00 04 	lw ra,(sp+4)
 788:	2b 8b 00 08 	lw r11,(sp+8)
 78c:	37 9c 00 08 	addi sp,sp,8
 790:	c3 a0 00 00 	ret

00000794 <uart_getchar1>:


//uart1

char uart_getchar1()
{   
 794:	78 01 00 00 	mvhi r1,0x0
 798:	38 21 09 54 	ori r1,r1,0x954
 79c:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart1->ucr & UART_DR)) ;
 7a0:	28 41 00 00 	lw r1,(r2+0)
 7a4:	20 21 00 01 	andi r1,r1,0x1
 7a8:	44 20 ff fe 	be r1,r0,7a0 <uart_getchar1+0xc>
	return uart1->rxtx;
 7ac:	28 41 00 04 	lw r1,(r2+4)
}
 7b0:	20 21 00 ff 	andi r1,r1,0xff
 7b4:	c3 a0 00 00 	ret

000007b8 <uart_putchar1>:

void uart_putchar1(char c)
{
 7b8:	78 02 00 00 	mvhi r2,0x0
 7bc:	38 42 09 54 	ori r2,r2,0x954
 7c0:	28 43 00 00 	lw r3,(r2+0)
 7c4:	20 21 00 ff 	andi r1,r1,0xff
	while (uart1->ucr & UART_BUSY) ;
 7c8:	28 62 00 00 	lw r2,(r3+0)
 7cc:	20 42 00 10 	andi r2,r2,0x10
 7d0:	5c 40 ff fe 	bne r2,r0,7c8 <uart_putchar1+0x10>
	uart1->rxtx = c;
 7d4:	58 61 00 04 	sw (r3+4),r1
}
 7d8:	c3 a0 00 00 	ret

000007dc <uart_putstr1>:

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 7dc:	40 24 00 00 	lbu r4,(r1+0)
 7e0:	44 80 00 0b 	be r4,r0,80c <uart_putstr1+0x30>
 7e4:	78 02 00 00 	mvhi r2,0x0
 7e8:	38 42 09 54 	ori r2,r2,0x954
 7ec:	28 43 00 00 	lw r3,(r2+0)
	return uart1->rxtx;
}

void uart_putchar1(char c)
{
	while (uart1->ucr & UART_BUSY) ;
 7f0:	28 62 00 00 	lw r2,(r3+0)
 7f4:	20 42 00 10 	andi r2,r2,0x10
 7f8:	5c 40 ff fe 	bne r2,r0,7f0 <uart_putstr1+0x14>
	uart1->rxtx = c;
 7fc:	58 64 00 04 	sw (r3+4),r4
void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar1(*c);
		c++;
 800:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr1(char *str)
{
	char *c = str;
	while(*c) {
 804:	40 24 00 00 	lbu r4,(r1+0)
 808:	5c 82 ff fa 	bne r4,r2,7f0 <uart_putstr1+0x14>
 80c:	c3 a0 00 00 	ret

00000810 <set_period>:
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 810:	78 02 00 00 	mvhi r2,0x0
 814:	38 42 09 50 	ori r2,r2,0x950
 818:	28 42 00 00 	lw r2,(r2+0)
 81c:	58 41 00 00 	sw (r2+0),r1
}
 820:	c3 a0 00 00 	ret

00000824 <set_motor1>:
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 824:	78 02 00 00 	mvhi r2,0x0
 828:	38 42 09 50 	ori r2,r2,0x950
 82c:	28 42 00 00 	lw r2,(r2+0)
 830:	58 41 00 04 	sw (r2+4),r1
}
 834:	c3 a0 00 00 	ret

00000838 <set_motor2>:
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 838:	78 02 00 00 	mvhi r2,0x0
 83c:	38 42 09 50 	ori r2,r2,0x950
 840:	28 42 00 00 	lw r2,(r2+0)
 844:	58 41 00 08 	sw (r2+8),r1
}
 848:	c3 a0 00 00 	ret

0000084c <set_motor3>:
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 84c:	78 02 00 00 	mvhi r2,0x0
 850:	38 42 09 50 	ori r2,r2,0x950
 854:	28 42 00 00 	lw r2,(r2+0)
 858:	58 41 00 0c 	sw (r2+12),r1
}
 85c:	c3 a0 00 00 	ret

00000860 <set_motor4>:
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 860:	78 02 00 00 	mvhi r2,0x0
 864:	38 42 09 50 	ori r2,r2,0x950
 868:	28 42 00 00 	lw r2,(r2+0)
 86c:	58 41 00 10 	sw (r2+16),r1
}
 870:	c3 a0 00 00 	ret

00000874 <setMotors>:

/***************************************************************************
 * Functions motors //FUNCIONES PRIMITIVAS
 */

void setMotors(){
 874:	37 9c ff fc 	addi sp,sp,-4
 878:	5b 9d 00 04 	sw (sp+4),ra
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 87c:	78 01 00 00 	mvhi r1,0x0
 880:	78 05 00 00 	mvhi r5,0x0
 884:	38 a5 08 f8 	ori r5,r5,0x8f8
 888:	38 21 09 50 	ori r1,r1,0x950
 88c:	28 22 00 00 	lw r2,(r1+0)
 890:	28 a4 00 00 	lw r4,(r5+0)
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 894:	38 03 ea 60 	mvu r3,0xea60
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x3E8);
 898:	34 01 03 e8 	mvi r1,1000
/***************************************************************************
 * Functions PWM //FUNCIONES PRIMITIVAS
 */

void set_period(int p){
	pwm0->period=p;
 89c:	58 44 00 00 	sw (r2+0),r4
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 8a0:	58 43 00 04 	sw (r2+4),r3
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 8a4:	58 43 00 08 	sw (r2+8),r3
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 8a8:	58 43 00 0c 	sw (r2+12),r3
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8ac:	58 43 00 10 	sw (r2+16),r3
	set_period(0x1E8480); //F=50Hz
	set_motor1(0xEA60);
	set_motor2(0xEA60);
	set_motor3(0xEA60);
	set_motor4(0xEA60);
	msleep(0x3E8);
 8b0:	fb ff ff 12 	calli 4f8 <msleep>
}
 8b4:	2b 9d 00 04 	lw ra,(sp+4)
 8b8:	37 9c 00 04 	addi sp,sp,4
 8bc:	c3 a0 00 00 	ret

000008c0 <up_down_q>:

void up_down_q(int s){
	int vel;
	int velM3;
	if(s>=0x1){
 8c0:	38 02 ea 60 	mvu r2,0xea60
 8c4:	4c 01 00 04 	bge r0,r1,8d4 <up_down_q+0x14>
		vel = 0x5DC * s + 0xFD20;
 8c8:	08 22 05 dc 	muli r2,r1,1500
 8cc:	38 03 fd 20 	mvu r3,0xfd20
 8d0:	b4 43 10 00 	add r2,r2,r3

void set_period(int p){
	pwm0->period=p;
}
void set_motor1(int wk){
	pwm0-> duty_m1=wk;
 8d4:	78 01 00 00 	mvhi r1,0x0
 8d8:	38 21 09 50 	ori r1,r1,0x950
 8dc:	28 21 00 00 	lw r1,(r1+0)
 8e0:	58 22 00 04 	sw (r1+4),r2
}
void set_motor2(int wk){
	pwm0-> duty_m2=wk;
 8e4:	58 22 00 08 	sw (r1+8),r2
}
void set_motor3(int wk){
	pwm0-> duty_m3=wk;
 8e8:	58 22 00 0c 	sw (r1+12),r2
}
void set_motor4(int wk){
	pwm0-> duty_m4=wk;
 8ec:	58 22 00 10 	sw (r1+16),r2
	}
	set_motor1(vel);
	set_motor2(vel);
	set_motor3(vel);
	set_motor4(vel);
}
 8f0:	c3 a0 00 00 	ret
